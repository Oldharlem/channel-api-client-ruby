=begin
#ChannelEngine Channel API

#ChannelEngine API for channels

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'uri'

module ChannelEngineChannelApiClient
  class ReturnApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Return
    # Mark (part of) an order as returned by the customer.
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponse]
    def return_declare_for_channel(model, opts = {})
      data, _status_code, _headers = return_declare_for_channel_with_http_info(model, opts)
      data
    end

    # Create Return
    # Mark (part of) an order as returned by the customer.
    # @param model 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponse, Fixnum, Hash)>] ApiResponse data, response status code and response headers
    def return_declare_for_channel_with_http_info(model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_declare_for_channel ...'
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ReturnApi.return_declare_for_channel"
      end
      # resource path
      local_var_path = '/v2/returns/channel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_declare_for_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Returns
    # Get all returns created by the merchant. This call is supposed  to be used by channels. Merchants should use the 'GET /v2/returns/merchant'  call.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :created_since Deprecated, please use FromDate instead.
    # @option opts [Array<String>] :statuses Return status(es) to filter on
    # @option opts [Array<String>] :reasons Return reason(s) to filter on
    # @option opts [DateTime] :from_date Filter on the creation date, starting from this date. This date is inclusive.
    # @option opts [DateTime] :to_date Filter on the creation date, until this date. This date is exclusive.
    # @option opts [Integer] :page The page to filter on. Starts at 1.
    # @return [CollectionOfChannelReturnResponse]
    def return_get_declared_by_merchant(opts = {})
      data, _status_code, _headers = return_get_declared_by_merchant_with_http_info(opts)
      data
    end

    # Get Returns
    # Get all returns created by the merchant. This call is supposed  to be used by channels. Merchants should use the &#39;GET /v2/returns/merchant&#39;  call.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :created_since Deprecated, please use FromDate instead.
    # @option opts [Array<String>] :statuses Return status(es) to filter on
    # @option opts [Array<String>] :reasons Return reason(s) to filter on
    # @option opts [DateTime] :from_date Filter on the creation date, starting from this date. This date is inclusive.
    # @option opts [DateTime] :to_date Filter on the creation date, until this date. This date is exclusive.
    # @option opts [Integer] :page The page to filter on. Starts at 1.
    # @return [Array<(CollectionOfChannelReturnResponse, Fixnum, Hash)>] CollectionOfChannelReturnResponse data, response status code and response headers
    def return_get_declared_by_merchant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_get_declared_by_merchant ...'
      end
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| ['IN_PROGRESS', 'RECEIVED', 'CANCELLED'].include?(item) }
        fail ArgumentError, 'invalid value for "statuses", must include one of IN_PROGRESS, RECEIVED, CANCELLED'
      end
      if @api_client.config.client_side_validation && opts[:'reasons'] && !opts[:'reasons'].all? { |item| ['PRODUCT_DEFECT', 'PRODUCT_UNSATISFACTORY', 'WRONG_PRODUCT', 'TOO_MANY_PRODUCTS', 'REFUSED', 'REFUSED_DAMAGED', 'WRONG_ADDRESS', 'NOT_COLLECTED', 'WRONG_SIZE', 'OTHER'].include?(item) }
        fail ArgumentError, 'invalid value for "reasons", must include one of PRODUCT_DEFECT, PRODUCT_UNSATISFACTORY, WRONG_PRODUCT, TOO_MANY_PRODUCTS, REFUSED, REFUSED_DAMAGED, WRONG_ADDRESS, NOT_COLLECTED, WRONG_SIZE, OTHER'
      end
      # resource path
      local_var_path = '/v2/returns/channel'

      # query parameters
      query_params = {}
      query_params[:'createdSince'] = opts[:'created_since'] if !opts[:'created_since'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'reasons'] = @api_client.build_collection_param(opts[:'reasons'], :multi) if !opts[:'reasons'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionOfChannelReturnResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_get_declared_by_merchant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
