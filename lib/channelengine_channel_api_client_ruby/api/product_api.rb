=begin
#ChannelEngine Channel API

#ChannelEngine API for channels

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require "uri"

module ChannelEngineChannelApiClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Acknowledge Product Data Changes
    # This endpoint should be called after a call to GET 'v2/products/data'. After a call to  this endpoint ChannelEngine 'knows' which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST 'v2/products/data'.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the 'Updated' and 'Removed'  fields consist of ChannelReferences which are sent in a previous call  within the field 'Created'.
    # @param changes The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)
    # @param [Hash] opts the optional parameters
    # @return [ApiResponse]
    def product_acknowledge_data_changes(changes, opts = {})
      data, _status_code, _headers = product_acknowledge_data_changes_with_http_info(changes, opts)
      return data
    end

    # Acknowledge Product Data Changes
    # This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
    # @param changes The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponse, Fixnum, Hash)>] ApiResponse data, response status code and response headers
    def product_acknowledge_data_changes_with_http_info(changes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_acknowledge_data_changes ..."
      end
      # verify the required parameter 'changes' is set
      if @api_client.config.client_side_validation && changes.nil?
        fail ArgumentError, "Missing the required parameter 'changes' when calling ProductApi.product_acknowledge_data_changes"
      end
      # resource path
      local_var_path = "/v2/products/data"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(changes)
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_acknowledge_data_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Acknowledge Product Offer Changes
    # After a call to GET 'v2/products/offers' this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see 'v2/products/data' and 'v2/products/data' for documentation.
    # @param changes The channel references of the updated products
    # @param [Hash] opts the optional parameters
    # @return [ApiResponse]
    def product_acknowledge_offer_changes(changes, opts = {})
      data, _status_code, _headers = product_acknowledge_offer_changes_with_http_info(changes, opts)
      return data
    end

    # Acknowledge Product Offer Changes
    # After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
    # @param changes The channel references of the updated products
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponse, Fixnum, Hash)>] ApiResponse data, response status code and response headers
    def product_acknowledge_offer_changes_with_http_info(changes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_acknowledge_offer_changes ..."
      end
      # verify the required parameter 'changes' is set
      if @api_client.config.client_side_validation && changes.nil?
        fail ArgumentError, "Missing the required parameter 'changes' when calling ProductApi.product_acknowledge_offer_changes"
      end
      # resource path
      local_var_path = "/v2/products/offers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(changes)
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_acknowledge_offer_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Product Data Changes
    # Get all products which have changes since the post http call to POST 'v2/products/data'.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully 'v2/products/data' should  be called with the merchant references of the products which have been processed (see POST 'v2/products/data').   ChannelEnginewill save this information to make sure that the next call to GET 'v2/products/data' only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll 'v2/products/data' for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST 'v2/products/data'.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   'ChannelParentReference'.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_count Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number.
    # @return [SingleOfChannelProductChangesResponse]
    def product_get_data_changes(opts = {})
      data, _status_code, _headers = product_get_data_changes_with_http_info(opts)
      return data
    end

    # Get Product Data Changes
    # Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_count Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number.
    # @return [Array<(SingleOfChannelProductChangesResponse, Fixnum, Hash)>] SingleOfChannelProductChangesResponse data, response status code and response headers
    def product_get_data_changes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_get_data_changes ..."
      end
      # resource path
      local_var_path = "/v2/products/data"

      # query parameters
      query_params = {}
      query_params[:'maxCount'] = opts[:'max_count'] if !opts[:'max_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SingleOfChannelProductChangesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_get_data_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Product Offer Changes
    # GET 'v2/products/offers' and POST 'v2/products/offers' closely resemble GET 'v2/products/data' and POST 'v2/products/data'. See the 'v2/products/data'  endpoints for documentation. The difference between both endpoints is that 'v2/products/offers' only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
    # @param [Hash] opts the optional parameters
    # @return [CollectionOfChannelOfferResponse]
    def product_get_offer_changes(opts = {})
      data, _status_code, _headers = product_get_offer_changes_with_http_info(opts)
      return data
    end

    # Get Product Offer Changes
    # GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CollectionOfChannelOfferResponse, Fixnum, Hash)>] CollectionOfChannelOfferResponse data, response status code and response headers
    def product_get_offer_changes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_get_offer_changes ..."
      end
      # resource path
      local_var_path = "/v2/products/offers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CollectionOfChannelOfferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_get_offer_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
